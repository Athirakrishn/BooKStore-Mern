                                            REACT - ADVANCED FRONT END TECHNOLOGY
                                       ----------------------------------------------
1. React : is JS Library for building faster UI for web application
2. Features fo React
     - Virtual DOM
     - Reusable Components
     - JSX
3. JSX (JavaScript XML) : Is an JS extension for writing HTML codes , used in react to display contents in webpage
                - JSX consists of JSX elements :
                         const variable-name = <starting-tag>content</ending-tag>
                - Rules of JSX :
                        1. Every JSX code  must be inside a single tag it can be container tag / react fragements (<> </>)
                        2. Every JSX tag must have closing tag. <starting-tag>content</ending-tag>   /
                        self closing tags <tag-name/>    
                        3. In JSX elements attributes or style properties / values must be in camel case (fontSize)
                        4. In JSX , attributes like class must as "className" and 'for' as "htmlFor"
                        5. IN JSX we can directly add js code using curly braces : {js code}
4. React App creation :
     - using vite : npm create vite@latest reactAppName -- --template react
5. File & Folder structure

6. React is a collection of Components, they are arranged in tree like structure. Root node of react app is App Component.
7. Components : used to create UI , it can be an entire webpage or part of web page
     - To create Component, Create  a file with file name starts with capital letter ,
       also Component name must same as its file name
     - ways to create Component
           - Functional Based Component / stateless Component : use JS pure function to build Component and it mus return JSX
           - Class Based component / state full Component : use js class to build Component, it must have render method where we can give jsx code
8. Life cycle methods of component
           - Mounting Phase :- Putting JSX into DOM
                    - constructor()
                    - getDerivedStateFromProps()
                    - render()
                    - ComponentDidMount()
           - Updating Phase :- When Component get updated
                - getDerivedStateFromProps()
                - shouldComponentUpdate()
                - render()
                - getSnapshotBeforeUpdate()
                - componentDidUpdate
           - Unmounting Phase :- Removing Component form DOM
                - ComponentWillUnmount()

                  Class Based Component                                          Functional Based Component
              --------------------------------------------------------------------------------------------------
                 1. uses js class to build component                           1. uses js pure function
                 2. Statefull component                                        2. Stateless Component
                 3. Uses constructor for initializing values                   3. No need of constructor
                 4. Life cycle methods are available                           4. Life cycle methods not available     



9. Styling React Component
      - Using Inline CSS : using style attribute
          - syntax : style={{properties:value,....}}
      - Using External CSS : using External css file 
      - Using CSS Module file : usong .modules.css extension file to define style using class selector.
10. Events Handling in react 
      - Binding function without argument : use function - name only to call the function
      - Binding function with argument : call function use ()=> function-name(arg)
      - Binding function with argument as event : call function use (event)=> function-name(event)
11. React props : Used to share datas from parent Component to its child , In react only parent can share data to its child.
                  - Props is properties of a component, props is an object so data stored as key and value.
                  - parent can share its data to the child tag using its attributes
                  - using 'props' as child Component function argument, using props we can access data in child 
12. Conditional rendering : we can control visibility of jsx element,use ternary / truthy operator
13. Handling List in react : To display list in jsx use "map" array method. Use 'key' props to all duplicating jsx items in list, key must be unique and used to identify by react dom 
14. React state : used to store values in a component, when ever state changes component also re render.    
15. React Hooks : are predefined function for enabling react component features in Functional Component, all hooks name will start with "use" keyword
         - How to use hooks in functional component
               - import hook in component
               - call hook at top level of the component
         - Common Hooks
               - useState : used to create state in Functional component , it returns a statefull value , and a function to update it
                    const [stateValue,stateUpdationFunctionName]=useState(initialValue)
               - useEffect : used add side effect to a component
                   useEffect(effect,dependancy)
                   - dependancy:can be 3 ways 
                        -no dependancy : effect will apply all time in component   
                        -empty array : effect will apply only at the creation of component
                        -[variable-name,.....]: effect will apply not only at the creation of component but also variable changes in component
               -useRef - used to store mutable data without re rendering the component, it also to get the reference , it also helps to get the reference of html element into component

                  customised hooks :create a js file name start with use inside the file define js 

15 Handling form in react: react can handle input data mainly 2 ways 
      -controlled component : input data will store inside the component state ,component has move over the form data
      -uncontolled component : here component can get the reference of input tag to get the input tag, here component   doesnot has more control over the form data

16 set up routs/path/url to a component
    - install react router dom 
        npm i rect-router-dom
    - set up path for component using react-router-dom  
       1.entire react app must be render inside  the BrowserRouter of react router dom Library
       2.place all component needs to be set up inside routes component inside routes use route component to set up path for 
hoc higher order component

16. Set up Route/path/url to a component
Install react-router-doe Library age react-rostar-60m
Set up path for component using react-router-con
1. Entire react app must be render inside the 'Browserkader of react-rader-don Library 2. Place all component ads to be set op path inside foutes component, beside foutes use foute
component to set up path for component using its 'path' attributes


17. AP1 Handling in React

Azios Library: Promise based HTTP request Handling
Install axios npe 1 axios
Axios Instance is used to make api call:
Using: axios(requestConfiguration)
requestConfiguration is object with predefined keys (method, url, data, headers...)
Axios methods (GET, PUT, POST, DELETE): axios.get(url)

18. Data Shairing Technques in React

-State Lifting: To share data fros one component to another by lifting the data to their comon parent and parent can share the lifted state/data using props with its children

------------------------------------------------------------------------------------------------------------------------------------------------
redux : a common storage will hold all data and it can be accessed by all component in the react app  

JSON SERVER - REACT API CREATION
-----------------------------------
1. Create a folder for json server
2. Create json file to store data
3. Install json-server: npm i json-server
4. To run json file (available in localhost:3000): npx json-server Json-file-name

DEPLOYING JSON SERVER USING NODE
----------------------------------
1. Install stable version of jsen-server: npe 1 json-server@0.17.0
2. Create index.js file
3. Inside Index, js file
   - create server using Library json-server using create method
   - import json file
   - create middleware: using defaults()
   - define port number to run the app in localhost
   - use middleware in server
   - define routes for client request (api endpoints for server)
   - run server for client request using listen method

REDUX: STATE MANAGEMENT TOOL
----------------------------
1. A JS library for predictable and maintainable global state management
2. REDUX consists of 2 Library

REDUX TOOLKIT: The official, opinionated, batteries-included toolset for officient Redux
    -development, npa install @reduxjs/toolkit
    -Create common storage: configureStore()
    -Actions to update data in store from component and they are similiar to function, to execute action it should be dispatch from component action output automatically return to reducers in
    -Redux, use createAction()
    -Slice: used to combine both action & reducer, use createslice()
    -Reducer: used to update data in storage

REACT REDUX: Official React bindings for Redux, npm install react-redux
    - Hooks:
    - useDispatch(action-name()): hook used to dispatch action from component
    - useSelector(): hook used to select data from store

                            MONGO-DB
----------------------------------------------------------------------
 1.DataBse : is an organized collection of data to be stored permanently
 2.MongoDB is a document database. 
 3.It stores data in a type of JSON format called BSON.
 4.values may include numbers, strings, booleans, arrays, or even nested documents.

